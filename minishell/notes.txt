- EXPORT
		- le nom de la var ne peut pas
			- etre un chiffre/nombre seul
			- compose d'un char special tel que
				- ~ ? ! # { } [] \ ^ @ ° £ % §
-------------------------------------------------------------
-PARSING
	- $ renvoi le contenu d'une ENV
		- si un egal est trouvé il y a deux options
			- si le nom de la var existe on revoi son contenu
			- si le contenu de la var existe pas 
				- si il y a un = on revoit ce qu'il y a derriere 
					(cela peut etre une string vide)
				- si il n'y a rien, renvoi string vide
	- si $ sans rien derriere c'est juste le char $

	-caractere qui serapare ? --> ex: on a t=1 de declare, si on ecrit echo $t%oui, bash affiche 1%oui, alors qu'avec $toui il renvoi une string vide
		- ~ # { } \ / ^ @ ° £ % § --> tout ce qui n'est pas alapha numerique et qui n'est pas un sseparator Y COMPRIS A et E avec accent
-------------------------------------------------------------

- ajouter fonction pipe in main 
- gerer les separateurs sans espaces
- gerer les \n sur echo et \\n 
	- le \ s'il est tt seul disparait
- gerer les $ avant un nom de variable avec export
- gerer les unset des variable deja mise
- gerer les \n sur echo et \\n
- regler le LEAK après l'execution de "echo lol | echo mdr"
- ajouter les ' ' autour de la valeur d'une var s'il y a un = dedans 
		- gerer ca dans export, dans env et dans trans_env
- GERER tous les charactere speciaux juste apres un \, meme les guillemets
- QUAND ON est entre guillement, a chaque \ rencontré, on rajoute automatiquement un \ collé a lui- Quand on rencontre un \, si le caractere suivant est defacto considere comme un caractere seul ET ascii, c'est a dire, ni un separateur, ni un caractere special genre retour a la ligne, non. C'est juste un caractere a prendre en compte comme input(le \ lui disparait)

-------------------------------------------------------------------------
----|---------|-----------------------------------------|-----------|---
----|---------|----------- NOUVEAU PARSING rules -------|-----------|----
----|---------|-----------------------------------------|-----------|----
----V---------V-----------------------------------------V-----------V---

méta-caractère
Un caractère qui, non protégé, sépare les mots. Un de ceux-ci :


PROTECTION (single quoting) 

PARSING 

	- single quote -> chaque caractere conserve uniquement sa valeur ascii, donc est un char
		- AJOUT d'UN \ derriere TOUT LES CHAR
		- " est lu AUSSI comme un simple char

	- double quote -> chaque caractere conserve uniquement sa valeur ascii, donc est un char
		- lu comme un simple char si \ derriere OU simple quote ouvert
		- AJOUT d'UN \ derriere TOUT LES CHAR
			- NE SONT PAS ECHAPPE
				- $ en toute situation,
				- \ quand il est suivie de $ " \ FINDELIGNE

	- separator
		- si non precédé d'un \
		- si non entre single quote
		- si non entre double quote

	- $ si succeder d'un single quote, le $ disparait tt simplement

VOIRRR Les mots de la forme $aqchaîneaq sont traités différemment dans le man 

FORMATAGE 

PREMIER PASSAGE

- $ la suite est une ENV, jusqu'a   -->   tout ce qui n'est pas alphanumérique EXPECT à é et les sséparator
	- si le char d'avant est un \, le dis char disparait et $ est un char, la suite n'est pas une ENV
	- si pas de suite $ est considere comme un char a conserver en string
	- si la suite ne correspond a aucun ENV existante, cela faut une string vide
	

DEUXIEME PASSAGE

- \ si | a b t n v f r | on remplace les deux par le ASCII qui correcpond

- \ le caractere derriere est conservé
	- le \ inital disparait


LIRE CA https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_03.html
