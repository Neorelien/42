code bien structuré et extensible
	
	lecture du/des string
	analyse des spécification de convertion
		Define / Enum ? 
		tableau ? 
		Variable globale ? 

----------------------------------------------------------------------------------------

Fonction a voir --> stdarg.h

	va_list 	ap --> variable avec comportement indéfini si envoyé dans une fonction ?
	void va_start(ap, last)
	type va_arg(ap, type)
	void va_copy(dst, src) --> doit etre suivie d'un va_end supplémentaire
	void va_end(ap)

----------------------------------------------------------------------------------------

Indication de convertion

	Débute par %

	Les flags --> 1er --> Peut importe l'ordre les répétitions peuvent etre mélangé

		-	--------------------------------------- insensible aux répétition 

			La valeur doit être justifié sur la limite gauche du champ
			Valeur complété a droite par des espaces

		0	--------------------------------------- insensible aux répétition
			
			IGNORÉ si l 'attribut - apparait aussi

			c	--> indéfini
			s	--> indéfini
			p	--> indéfini
			d	--> remplissage a gauche avec des 0 --> ignoré en cas de précision
			i	--> remplissage a gauche avec des 0 --> ignoré en cas de précision
			u	--> remplissage a gauche avec des 0 --> ignoré en cas de précision
			x	--> remplissage a gauche avec des 0 --> ignoré en cas de précision
			X	--> remplissage a gauche avec des 0 --> ignoré en cas de précision
			%	--> indéfini

		*	--------------------------------------- 

			indique que la size est l'argument suivant, si négatif on considere que le flag - est activé

	La size --> 2eme --> erreur de répétition 

		* --> indique que la size se situe dans l'argument suivant
		Nombre(INT) ne commencant pas par 0
		Si valeur négative, on considére que ca vaut l'attribut -, donc on justifie a gauche en ajoutant les espaces
		Indique la largeur minimal de champ
		Ne troncate jamais le champ ! 
		

	La précision --> 3eme --> erreur de répétition

		Commence toujours par un "."
		Suivi d'un nombre(INT) OU de *
		Si aucune valeur ou valeur négative --> valeur =  nulle

		c	--> 

		s	--> Indique le nombre MAXIMUM de caractere a imprimer

		p	--> ??

		d	--> Indique un MINIMUM de chiffre a faire apparaitre
				Si int trop petit on remplit a gauche avec des 0 --> equivaut a 0(int)
				par defaut 1
				si 0 est convertit avec précision de 0 alors sortie vide

		i	--> Indique un MINIMUM de chiffre a faire apparaitre				
				Si int trop petit on remplit a gauche avec des 0 --> equivaut a 0(int)
				par defaut 1
				si 0 est convertit avec précision de 0 alors sortie vide

		u	--> Indique un MINIMUM de chiffre a faire apparaitre
				Si int trop petit on remplit a gauche avec des 0 --> equivaut a 0(int)
				par defaut 1
				si 0 est convertit avec précision de 0 alors sortie vide

		x	--> Indique un MINIMUM de chiffre a faire apparaitre
				Si int trop petit on remplit a gauche avec des 0 --> equivaut a 0(int)
				par defaut 1
				si 0 est convertit avec précision de 0 alors sortie vide

		X	--> Indique un MINIMUM de chiffre a faire apparaitre
				Si int trop petit on remplit a gauche avec des 0 --> equivaut a 0(int)
				par defaut 1
				si 0 est convertit avec précision de 0 alors sortie vide

		%	--> ??

	Le type/indicateur de convertion --> dernier

		c	--> convertit un int en unsigned char, le caracactère correspondant est affiché (ascii)
		p	--> affiche (l'adresse ?) du pointeur en hexadécimal
		d	-->	int convertit en chiffre décimal signé
		i	--> int convertit en chiffre décimal signé
		u	-->	unsigned int converti en un chiffre décimal non signé
		x	--> unsigned int converti en un chiffre Hexadécimal non signé
		X	--> unsigned int converti en un chiffre Hexadécimal non signé
		s	--> string
		%	--> ecrit juste '%'


		combinaison de flag possible

	
----------------------------------------------------------------------------------------

Conversions
		c	--> OK
		s	--> OK
		p	--> OK
		d	--> OK
		i	--> OK
		u	-->
		x	-->
		X	-->
		%	-->

	if (c == 'c')
		return ((char)va_arg(*arg, char));
	if (c == 's')
		return ((char*)va_arg(*arg, char*));
	if (c == 'p')
		return ((unsigned long long)va_arg(*arg, unsigned long long));
	if ((c == 'd') || (c == 'i'))
		return ((int)va_arg(*arg, int));
	if (c == 'u')
		return ((unsigned int)va_arg(*arg, unsigned int));
	if ((c == 'x') || (c == 'X'))
		return ((long)va_arg(*arg, long));

----------------------------------------------------------------------------------------

Valeur renvoyés
		 Si ca reussi --> le nombre de caractères imprimés, sans compter l'octet nul « \0 » final dans les chaînes
		 Si il y a une erreur de sortie --> valeur négative

----------------------------------------------------------------------------------------

man 3 printf / man 3 stdarg

----------------------------------------------------------------------------------------

Autre

	les operateur
		^	  --> OU exclusif (l'un ou l'autre mais pas les deux)
		|	  --> OU inclusif (l'un ou l'autre et les deux)
		&	  --> ET
		>> << --> opérateur de décalage

	technique utilisant les opérateurs et les booléens ? 

	Enum? 

----------------------------------------------------------------------------------------

A tester
